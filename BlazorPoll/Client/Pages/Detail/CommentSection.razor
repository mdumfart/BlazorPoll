@using BlazorPoll.Client.Services
@using Bunit.Extensions
@using Microsoft.AspNetCore.Identity
@inject ICommentsService CommentsService
@inject IUserService UserService
@inject IJSRuntime JS

<section class="comment-section-wrapper">
    @if (Comments?.Data != null && Comments?.Data?.Count != 0)
    {
        @foreach (var comment in Comments.Data)
        {
            <CommentComponent DisplayComment="@comment"/>
        }

        <div class="pagination-wrapper">
            <BlazorPager CurrentPage="@Comments.CurrentPage"
                         PageCount="@Comments.PageCount"
                         OnPageChanged="(async e => { _page = e; NotifyParentPageChanged(); })"
                         ShowFirstLast="false"
                         ShowPageNumbers="true"
                         VisiblePages="10"
                         FirstText="First"
                         LastText="Last" />
        </div>
    }


    <EditForm Model="@Comment" OnValidSubmit="SubmitComment">
        <DataAnnotationsValidator/>
        <div class="input-group input-group-lg input-validation-wrapper create-comment-input-wrapper">
            <InputText class="form-control input-validate full-width" placeholder="Write a comment..." @bind-Value="Comment.Content" disabled="@(!IsAuthenticated)"/>
            <div class="validation-message-wrapper">
                <ValidationMessage For="@(() => Comment.Content)"/>
            </div>
        </div>
        
        @if (!IsAuthenticated)
        {
            <div class="login-hint"><NavLink href="@GetLoginRedirectLink()">Log in</NavLink> to write a comment</div>
        }

        <button class="btn btn-primary button-send-comment" disabled="@(!IsAuthenticated)">
            @if (IsLoading)
            {
                <Bounce Size="20px" Color="#fff" class="@(IsLoading ? "loading-visible" : "loading-invisible")"/>
            }
            else
            {
                <span class="@(!IsLoading ? "loading-visible" : "loading-invisible")">Submit comment</span>
            }
        </button>
    </EditForm>
</section>

@code {
    [Parameter]
    public Poll Poll { get; set; }
    [Parameter]
    public PaginatedWrapperDto<List<Comment>> Comments { get; set; }
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public bool IsAuthenticated { get; set; } = false;
    public Comment Comment { get; set; } = new Comment();
    private bool IsLoading { get; set; } = false;
    private int _page = 1;

    protected override async Task OnInitializedAsync()
    {
        IsAuthenticated = await CheckAuthenticationState();
    }

    private async Task SubmitComment()
    {
        if (await CheckAuthenticationState())
        {
            var currentUsername = await UserService.GetCurrentUsername();

            if (!currentUsername.IsNullOrEmpty())
            {
                var user = await UserService.FindByUsername(currentUsername);
                Comment.Author = user;
                Comment.Poll = Poll;

                var createdComment = await CommentsService.Create(Comment);

                if (createdComment != null)
                {
                    Comment.Content = String.Empty;

                    if (Comments.CurrentPage == Comments.PageCount)
                    {
                        Comments.Data.Add(createdComment);
                    }
                    else if (Comments == null)
                    {
                        Comments = new PaginatedWrapperDto<List<Comment>>()
                        {
                            AvailableRows = 1,
                            CurrentPage = 1,
                            PageCount = 1,
                            Data = new List<Comment>() { createdComment }
                        };
                    }

                    await JS.InvokeVoidAsync("scrollToBottom");
                }
            }
        }
    }

    private async Task<bool> CheckAuthenticationState()
    {
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;

        if (user?.Identity != null)
        {
            return user.Identity.IsAuthenticated;
        }

        return false;
    }

    private void NotifyParentPageChanged()
    {
        OnPageChanged.InvokeAsync(_page);
    }

    private string GetLoginRedirectLink()
    {
        return $"/login?redirect=/poll/{Poll.Id}";
    }
}