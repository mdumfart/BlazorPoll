@page "/poll/{id}"
@using BlazorPoll.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject IPollService PollService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

@if (Poll == null)
{
    <NoPollFound />
}
else
{
<div class="poll-details-wrapper">
    <VisualizePoll Poll="@Poll" @ref="VisualizePollChild"></VisualizePoll>
    <h2 class="question-header-details">@Poll.Question</h2>


    @if (!Copied)
    {
        <button class="copy-clipboard-wrapper" @onclick="CopyToClipBoard">
            <span class="far fa-copy copy-icon"></span><span>Copy link to clipboard</span>
        </button>

    }
    else
    {
        <span class="copied-text">Copied!</span>
    }

    @if (!String.IsNullOrEmpty(Poll.Description))
    {
        <div class="poll-description">@Poll.Description</div>
    }

    @if (!Answered)
    {
        <div class="answers-wrapper">
            @if (Poll.IsMultipleChoice)
            {
                <h3>Select multiple answers:</h3>
                <div class="answers-content-wrapper">
                    @foreach (var answer in Poll.Answers)
                    {
                        <VoteAnswer IsMultipleChoice="true" Answer="@answer"></VoteAnswer>
                    }
                </div>
            }
            else
            {
                <h3 class="select-answer-header">Select an answer:</h3>
                <EditForm Model="Poll.Answers">
                    <div class="answers-content-wrapper">
                        @foreach (var answer in Poll.Answers)
                        {
                            <VoteAnswer IsMultipleChoice="false" Answer="@answer" OnSelectionChanged="@(() => OnRadioSelectionChanged(answer))"></VoteAnswer>
                        }
                    </div>
                    <button class="btn btn-primary button-send-answer" type="submit" @onclick="SubmitAnswer">
                        @if (IsLoading)
                        {
                            <Bounce Size="20px" Color="#fff" class="@(IsLoading ? "loading-visible" : "loading-invisible")" />
                        }
                        else
                        {
                            <span class="@(!IsLoading ? "loading-visible" : "loading-invisible")">Submit answer</span>
                        }
                    </button>
                </EditForm>
            }
        </div>
    }
    else
    {
        <Answered />
    }
</div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Poll Poll { get; set; }
    public bool Answered { get; set; } = false;
    public bool Copied { get; set; } = false;
    private VisualizePoll VisualizePollChild;
    private bool IsLoading { get; set; } = false;
    private IPollHubService _pollHubService;
    private Answer SelectedRadioAnswer { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Guid guidFromParams = Guid.Empty;

        try
        {
            guidFromParams = new Guid(Id);
            Poll = await GetPollByIdAsync(guidFromParams);
        }
        catch (Exception e)
        {
            // When Guid creation or http call fails
            Poll = null;
        }

        if (Poll != null)
        {
            _pollHubService = new PollHubService(NavigationManager.ToAbsoluteUri("/pollhub").ToString());
            await _pollHubService.StartPollHubConnection(Poll);

            _pollHubService.PollChanged += async (poll) => await VisualizePollChild.UpdatePoll(poll);
        }
    }


    private async Task<Poll> GetPollByIdAsync(Guid id)
    {
        return await PollService.FindPollById(id);
    }

    public async ValueTask DisposeAsync()
    {
        await _pollHubService.Dispose(Poll);
    }

    /// <summary>
    /// Set selected item for single choice polls
    /// </summary>
    /// <param name="answer">The answer to set to currently selected</param>
    public void OnRadioSelectionChanged(Answer answer)
    {
        SelectedRadioAnswer = answer;
    }

    private async Task SubmitAnswer()
    {
        IsLoading = true;
        var result = await PollService.SendSinglePollAnswer(Poll, SelectedRadioAnswer, _pollHubService);
        IsLoading = false;

        if (result)
            Answered = true;
    }

    private async Task CopyToClipBoard()
    {
        Copied = true;
        await JS.InvokeAsync<string>("copyStringToClipboard", NavigationManager.Uri);
        await Task.Delay(5000);
        Copied = false;
    }

}