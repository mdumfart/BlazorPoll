@page "/poll/{id}"
@using BlazorPoll.Client.Services
@using BlazorPoll.Shared.Dtos
@using Microsoft.AspNetCore.SignalR.Client
@inject IPollService PollService;
@inject ICommentsService CommentsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

@if (Poll == null)
{
    <NoPollFound />
}
else
{
    <div class="poll-details-wrapper">
        <VisualizePoll Poll="@Poll" @ref="VisualizePollChild"></VisualizePoll>
        <h2 class="question-header-details">@Poll.Question</h2>


        @if (!Copied)
        {
            <button class="copy-clipboard-wrapper" @onclick="CopyToClipBoard">
                <span class="far fa-copy copy-icon"></span><span>Copy link to clipboard</span>
            </button>

        }
        else
        {
            <span class="copied-text">Copied!</span>
        }

        @if (!String.IsNullOrEmpty(Poll.Description))
        {
            <div class="poll-description">@Poll.Description</div>
        }

        @if (!Answered)
        {
            <div class="answers-wrapper">
                @if (Poll.IsMultipleChoice)
                {
                    <h3>Select multiple answers:</h3>
                    <div class="answers-content-wrapper">
                        @foreach (var answer in Poll.Answers)
                        {
                            <VoteAnswer IsMultipleChoice="true" OnSelectionChangedMultiple="@OnMultipleSelectionChange" Answer="@answer"></VoteAnswer>
                        }
                    </div>
                    <button class="btn btn-primary button-send-answer" type="submit" @onclick="SubmitAnswer">
                        @if (IsLoading)
                        {
                            <Bounce Size="20px" Color="#fff" class="@(IsLoading ? "loading-visible" : "loading-invisible")" />
                        }
                        else
                        {
                            <span class="@(!IsLoading ? "loading-visible" : "loading-invisible")">Submit answer</span>
                        }
                    </button>
                }
                else
                {
                    <h3 class="select-answer-header">Select an answer:</h3>
                    <EditForm Model="Poll.Answers">
                        <div class="answers-content-wrapper">
                            @foreach (var answer in Poll.Answers)
                            {
                                <VoteAnswer IsMultipleChoice="false" Answer="@answer" OnSelectionChangedSingle="@(() => OnSingleSelectionChanged(answer))"></VoteAnswer>
                            }
                        </div>
                        <button class="btn btn-primary button-send-answer" type="submit" @onclick="SubmitAnswer">
                            @if (IsLoading)
                            {
                                <Bounce Size="20px" Color="#fff" class="@(IsLoading ? "loading-visible" : "loading-invisible")" />
                            }
                            else
                            {
                                <span class="@(!IsLoading ? "loading-visible" : "loading-invisible")">Submit answer</span>
                            }
                        </button>
                    </EditForm>
                }
            </div>
        }
        else
        {
            <Answered />
        }

        <CommentSection Poll="@Poll" Comments="@PaginatedComments" OnPageChanged="@((int page) => LoadPaginatedComments(page))" />


    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public Poll Poll { get; set; }
    public bool Answered { get; set; } = false;
    public bool Copied { get; set; } = false;
    public PaginatedWrapperDto<List<Comment>> PaginatedComments { get; set; }

    private VisualizePoll VisualizePollChild;
    private bool IsLoading { get; set; } = false;
    private IPollHubService _pollHubService;
    private Answer SelectedSingleAnswer { get; set; }
    private List<Answer> SelectedMultipleAnswers { get; set; } = new List<Answer>();
    private const int PageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        Guid guidFromParams = Guid.Empty;

        try
        {
            guidFromParams = new Guid(Id);
            Poll = await GetPollByIdAsync(guidFromParams);
        }
        catch (Exception e)
        {
            // When Guid creation or http call fails
            Poll = null;
        }

        if (Poll != null)
        {
            _pollHubService = new PollHubService(NavigationManager.ToAbsoluteUri("/pollhub").ToString());
            await _pollHubService.StartPollHubConnection(Poll);

            _pollHubService.PollChanged += async (poll) => await VisualizePollChild.UpdatePoll(poll);
        }

        var pageCount = (double) Poll.Comments.Count() / PageSize;
        var lastPage = pageCount == 0 ? 1 : (int) Math.Ceiling(pageCount);
        await LoadPaginatedComments(lastPage);
    }


    private async Task<Poll> GetPollByIdAsync(Guid id)
    {
        return await PollService.FindPollById(id);
    }

    public async ValueTask DisposeAsync()
    {
        await _pollHubService.Dispose(Poll);
    }

    /// <summary>
    /// Set selected item for single choice polls
    /// </summary>
    /// <param name="answer">The answer to set to currently selected</param>
    public void OnSingleSelectionChanged(Answer answer)
    {
        SelectedSingleAnswer = answer;
    }

    public void OnMultipleSelectionChange(Answer answer)
    {
        if (SelectedMultipleAnswers.Contains(answer))
        {
            SelectedMultipleAnswers.Remove(answer);
        }
        else
        {
            SelectedMultipleAnswers.Add(answer);
        }
    }

    private async Task SubmitAnswer()
    {
        IsLoading = true;
        bool result = false;

        if (Poll.IsMultipleChoice)
        {
            result = await PollService.SendMultiplePollAnswers(Poll, SelectedMultipleAnswers, _pollHubService);
        }
        else
        {
            result = await PollService.SendSinglePollAnswer(Poll, SelectedSingleAnswer, _pollHubService);
        }

        IsLoading = false;

        if (result)
            Answered = true;
    }

    private async Task CopyToClipBoard()
    {
        Copied = true;
        await JS.InvokeAsync<string>("copyStringToClipboard", NavigationManager.Uri);
        await Task.Delay(5000);
        Copied = false;
    }

    private async Task LoadPaginatedComments(int page)
    {
        PaginatedComments = await CommentsService.GetByPollIdPaginated(Poll.Id, page);
    }

}