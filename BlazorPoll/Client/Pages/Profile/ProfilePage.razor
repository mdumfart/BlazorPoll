@page "/profile"
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@using BlazorPoll.Client.Services
@using BlazorPoll.Shared.Dtos
@using Microsoft.AspNetCore.Authorization
@inject IPollService PollService
@inject ICommentsService CommentsService
@inject IUserService UserService


<div class="content-centered-vertical index-create-container profile-wrapper">
    <div class="row">
        <div class="col-sm profile-column">
            <MyPolls Polls="@MyPolls"></MyPolls>
        </div>
        <div class="col-sm profile-column">
            <MyComments Comments="@MyPaginatedComments" OnPageChanged="@((int page) => LoadPage(page))"/>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public List<Poll> MyPolls = new List<Poll>();
    public PaginatedWrapperDto<List<Comment>> MyPaginatedComments = new PaginatedWrapperDto<List<Comment>>();
    private User _authenticatedUser;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateTask).User;

        MyPolls = await PollService.FindByUsername(user.Identity?.Name);
        MyPaginatedComments = await LoadPaginatedComments(1);
    }

    public async Task LoadPage(int page)
    {
        MyPaginatedComments = await LoadPaginatedComments(page);
    }

    private async Task<PaginatedWrapperDto<List<Comment>>> LoadPaginatedComments(int page)
    {
        return await CommentsService.GetByUsernamePaginated(_authenticatedUser.Username, page);
    }
}
